package com.appinit.appinit.controller;

import com.appinit.appinit.model.DataStore;
import com.appinit.appinit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//MVC =Model view controller s a software architecture pattern, which separates application into three parts: model, view, and controller.
// The model represents a Java object carrying data. The view visualizes the data that the model contains.
// The controller manages the data flow into model object and updates the view whenever data changes; it keeps view and model separate.

@Controller
public class FormController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @GetMapping(value = "/form.html")
    public String sendForm(Model model) {
        model.addAttribute("form", new DataStore());
        return "form";
    }

    //  @PostMapping(value = "/form")
    //  public String formSubmit(@ModelAttribute DataStore dataStore, Model model) {
    //    model.addAttribute("form", dataStore);
    // model.addAttribute("firstname",dataStore.getFirstname());
    // model.addAttribute("lastname",dataStore.getLastname());

    //     return "results";
    //  }



    @PostMapping(path = "/resultsform") // Map ONLY POST Requests
    public String addNewUser(@RequestParam String firstname
            , @RequestParam String lastname, @RequestParam String email, @RequestParam String password
            , @RequestParam String repassword, @ModelAttribute DataStore n, RedirectAttributes attributes, Model model) {
        // @ResponseBody means the returned String is the response, not a view name if you want to put5 it
        // @RequestParam means it is a parameter from the GET or POST request
        if (password.equals(repassword)) {

            n.setFirstname(firstname);
            n.setLastname(lastname);
            n.setEmail(email);
            n.setPassword(password);
            userRepository.save(n);

            model.addAttribute("form", n);
            model.addAttribute("firstname", n.getFirstname());
            model.addAttribute("lastname", n.getLastname());
            model.addAttribute("email", n.getEmail());
            model.addAttribute("password", n.getPassword());
            return "resultsform";
        } else {
            attributes.addFlashAttribute("message", "Passwords do not match.");
            return "redirect:/form.html";
        }

    }
}

