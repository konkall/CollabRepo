package com.appinit.appinit.controller;

import com.appinit.appinit.model.DataStore;
import com.appinit.appinit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

//MVC =Model view controller s a software architecture pattern, which separates application into three parts: model, view, and controller.
// The model represents a Java object carrying data. The view visualizes the data that the model contains.
// The controller manages the data flow into model object and updates the view whenever data changes; it keeps view and model separate.

@Controller
public class FormController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(value = "/form.html")
    public String sendForm(Model model) {
        model.addAttribute("form", new DataStore());
        return "form";
    }

  //  @PostMapping(value = "/form")
  //  public String formSubmit(@ModelAttribute DataStore dataStore, Model model) {
    //    model.addAttribute("form", dataStore);
       // model.addAttribute("firstname",dataStore.getFirstname());
       // model.addAttribute("lastname",dataStore.getLastname());

   //     return "results";
  //  }


    @PostMapping(path="/form") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String firstname
            , @RequestParam String lastname) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        DataStore n = new DataStore();
        n.setFirstname(firstname);
        n.setLastname(lastname);
        userRepository.save(n);
        return firstname + lastname;
    }
// cntrol +alt+sft + /  --- registry -- compile automate allow
    //control+als+s  --- build project automatically
}

