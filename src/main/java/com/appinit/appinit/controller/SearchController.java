package com.appinit.appinit.controller;

import com.appinit.appinit.utilities.CSV;
import com.appinit.appinit.model.Client;
import com.appinit.appinit.repository.ClientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;

//MVC =Model view controller s a software architecture pattern, which separates application into three parts: model, view, and controller.
// The model represents a Java object carrying data. The view visualizes the data that the model contains.
// The controller manages the data flow into model object and updates the view whenever data changes; it keeps view and model separate.

@Controller
public class SearchController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;


    @GetMapping(value = "/search.html")
    public String sendForm(Model model) {
        model.addAttribute("search", new Client());
        return "search";
    }

    @PostMapping(path="/searchResults") // Map ONLY POST Requests
    public String addNewUser (@RequestParam String name, @RequestParam String ssn
            , @RequestParam String accountType
            , @ModelAttribute Client n, Model model) {

        Client client = new Client();
        ExampleMatcher matcher = ExampleMatcher.matching()
                .withIgnorePaths("id", "balance")
                .withIgnoreNullValues()
                .withMatcher("name", ExampleMatcher.GenericPropertyMatcher::startsWith)
                .withIgnoreCase();

        if(!name.isEmpty()){ client.setName(name); }
        if(!ssn.isEmpty()){ client.setSsn(ssn); }
        if(!accountType.isEmpty()){ client.setAccountType(accountType); }


        Example<Client> example = Example.of(client, matcher);
        Iterable<Client> searchResults = clientRepository.findAll(example);

        model.addAttribute("nameResults", searchResults);

        return "searchResults";
    }


}

